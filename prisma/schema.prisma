// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Post {
//   id        String     @default(cuid()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

model User {
  id            String    @default(cuid()) @id @map("_id")
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String
  profileImage  String?

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  refreshToken  RefreshToken[]

  tweets        Tweet[]
  mediaFiles    MediaFile[]
  
  @@map(name: "users")
}

model RefreshToken{
  id          String    @default(cuid()) @id @map("_id")
  token       String    @unique
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  userId      String    
  user        User      @relation(fields: [userId], references: [id])
}

model Tweet{
  id         String    @default(cuid()) @id @map("_id")
  text       String

  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @updatedAt @map(name: "updated_at")

  author     User      @relation(fields: [authorId], references: [id])
  authorId   String

  replyToId  String?   @map(name: "reply_to_id")
  replyTo    Tweet?    @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Tweet[]   @relation("ReplyTo")

  mediaFiles MediaFile[]
}

model MediaFile {
  id String @default(cuid()) @id @map("_id")
  url String
  providerPublicId String @map(name: "provider_public_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])
  userId String

  tweet Tweet @relation(fields: [tweetId], references: [id])
  tweetId String
}